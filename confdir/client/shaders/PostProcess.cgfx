float4x4 mvp : WorldViewProjection;
float4x4 view : View;
float4x4 viewInverse : ViewInverse;
float4x4 worldViewProjectionInverse : WorldViewProjectionInverse;
float time = 1.0;

sampler2D colors = sampler_state
{
   magFilter = Point;
   minFilter = Point;
};
sampler2D normals = sampler_state
{
   magFilter = Point;
   minFilter = Point;
};
sampler2D positions = sampler_state
{
   magFilter = Point;
   minFilter = Point;
};

float3 lightPos = float3(0, 0, 0);
float3 lightDiffuse = float3(1.0, 1.0, 1.0);
float3 lightSpecular = float3(0.9, 1.0, 0.8);

struct VSout
{
   float4 position  : POSITION;
   float2 tex       : TEXCOORD0;
   float4 pos       : TEXCOORD1;
};

VSout vs(in float4 position : POSITION, in float2 tex : TEXCOORD0)
{
    VSout vout;
    vout.position = mul(mvp, position);
    vout.pos = vout.position;
#ifdef DIRECTX
    vout.tex = tex;
#else
    vout.tex = float2(tex.x, 1 - tex.y);
#endif
    return vout;
}

float3 decodeNormals(float4 enc, float3 view)
{
    float4 nn = enc*float4(2,2,0,0) + float4(-1,-1,1,-1);
    float l = dot(nn.xyz, -nn.xyw);
    nn.z = l;
    nn.xy *= sqrt(l);
    return nn.xyz * 2 + float3(0,0,-1);
}

float4 fs(in VSout i) : COLOR
{
    float3 vDiffuseMaterial = tex2D(colors, i.tex).rgb;
    //float3 vSpecularMaterial = tex2D(SceneMaterialSampler, i.vTex0).a;

    // normals are stored in texture space [0,1] -> convert them back to [-1,+1] range
    float4 tmp = tex2D(normals, i.tex);
    float3 vWorldNrm = decodeNormals(tmp, viewInverse[3].xyz);

    float3 vWorldPos2 = tex2D(positions, i.tex).xyz;

    tmp = mul(worldViewProjectionInverse, float4(i.pos.x, i.pos.y, tmp.w * i.pos.w, i.pos.w));
    float3 vWorldPos = tmp.xyz / tmp.w;
    
    //if (i.pos.x < 0)
        vWorldPos = vWorldPos2;

    float3 vLightDir = normalize(lightPos - vWorldPos);
    float3 vEyeVec = normalize(viewInverse[3].xyz - vWorldPos);
    float3 vDiffuseIntensity = dot(vWorldNrm, vLightDir);
    float3 vSpecularIntensity = pow(max(0, dot(vEyeVec, reflect(-vLightDir, vWorldNrm))), 150);

    float4 color;
    color.rgb = (vDiffuseIntensity * lightDiffuse) * vDiffuseMaterial
         + vSpecularIntensity * lightSpecular.xyz;// * vSpecularMaterial;
    color.a = 1.0;
    
    //color.rgb = vWorldPos;//vDiffuseMaterial;

    // here we add color to show how lighting pass affects the scene
    //color.rgb += i.tex.rgr * 0.5;

    return color;
}

#ifndef DIRECTX

technique tech_glsl
{
    pass p0
    {
        VertexProgram = compile glslv vs();
        FragmentProgram = compile glslf fs();
    }
}
technique tech
{
    pass p0
    {
        VertexProgram = compile arbvp1 vs();
        FragmentProgram = compile arbfp1 fs();
    }
}

#else

technique tech
{
   pass p0
   {
       VertexShader = compile vs_2_0 vs();
       PixelShader = compile ps_2_0 fs();
   }
}

#endif
