float4x4 mvp : WorldViewProjection;
sampler2D baseTex = sampler_state
{
    minFilter = Linear;
    magFilter = Linear;
};

struct VSout
{
   float4 position : POSITION;
   float2 texCoord : TEXCOORD0;
};

VSout vs(in float4 position : POSITION, in float2 texCoord : TEXCOORD0)
{
   VSout vout;
   vout.position = mul(mvp, position);
   vout.texCoord = texCoord;
   return vout;
}

float4 fs(in VSout v) : COLOR
{
   return tex2D(baseTex, v.texCoord);
}

technique tech
{
   pass p0
   {
       VertexProgram = compile glslv vs();
       FragmentProgram = compile glslf fs();
   }
}

technique tech_arb
{
   pass p0
   {
       VertexProgram = compile arbvp1 vs();
       FragmentProgram = compile arbfp1 fs();
   }
}
